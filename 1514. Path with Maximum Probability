class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<vector<pair<int, double>>> adj(n);
        for(int i = 0; i < edges.size(); i++) {
            adj[edges[i][0]].push_back({edges[i][1], succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        vector<bool> visited(n, false);
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start_node});
        while(!pq.empty()) {
            double prob = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            visited[node] = true;

            if(node == end_node) return prob;
            for(auto& it : adj[node]) {
                if(!visited[it.first]) {
                    pq.push({prob * it.second, it.first});
                }
            }
        }
        return 0.0;
    }
};
