class Solution {
private:
    vector<int> topoOrder(vector<int>& indegree, vector<vector<int>>& adj) {
        queue<int> q;
        for(int i = 1; i < indegree.size(); i++) {
            if(indegree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> topo;
        while(!q.empty()) {
            int elem = q.front();
            q.pop();
            topo.push_back(elem);
            for(auto& it : adj[elem]) {
                indegree[it]--;
                if(indegree[it] == 0) {
                    q.push(it);
                }
            }
        }
        return topo;
    }
public:
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        vector<int> indegree(k + 1, 0), indegree2(k + 1, 0);
        vector<vector<int>> adj(k + 1), adj2(k + 1);
        for(auto& row : rowConditions) {
            indegree[row[1]]++;
            adj[row[0]].push_back(row[1]);
        }
        for(auto& col : colConditions) {
            indegree2[col[1]]++;
            adj2[col[0]].push_back(col[1]);
        }
        vector<int> topoRow = topoOrder(indegree, adj);
        vector<int> topoCol = topoOrder(indegree2, adj2);
        vector<vector<int>> res(k, vector<int> (k, 0));
        int temp1 = 0, temp2 = 0;
        for(int i = 1; i <= k; i++) {
            int row = -1, col = -1;
            for(int j = 0; j < topoRow.size(); j++) {
                if(topoRow[j] == i) {
                    row = j;
                }
            }
            for(int j = 0; j < topoCol.size(); j++) {
                if(topoCol[j] == i) {
                    col = j;
                }
            }
            if(row == -1) row = temp1;
            if(col == -1) col = temp2;
            res[row][col] = i;
            temp1 = row + 1;
            temp2 = col + 1;
        }
        if(topoRow.size() < k || topoCol.size() < k) return {};
        return res;
    }
};
