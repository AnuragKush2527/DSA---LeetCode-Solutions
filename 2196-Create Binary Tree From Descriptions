/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* solve(int root, unordered_map<int, vector<pair<int, int>>>& map) {
        TreeNode* node = new TreeNode(root);
        auto& childs = map[root];
        for(auto& child : childs) {
            if(child.second == 1) {
                node->left = solve(child.first, map);
            }
            else {
                node->right = solve(child.first, map);
            }
        }
        return node;
    }
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int, int> check;
        unordered_map<int, vector<pair<int, int>>> map;
        for(int i = 0; i < descriptions.size(); i++) {
            check[descriptions[i][1]]++;
            map[descriptions[i][0]].push_back({descriptions[i][1], descriptions[i][2]});
        }
        int root;
        for(int i = 0; i < descriptions.size(); i++) {
            if(check.find(descriptions[i][0]) == check.end()) root = descriptions[i][0];
        }
        return solve(root, map);
    }
};
