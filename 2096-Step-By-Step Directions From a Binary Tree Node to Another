/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* lowestCommonAncestor(TreeNode* root, int p, int q) {
        if(root == NULL) return NULL;
        if(root->val == p || root->val == q) return root;
        TreeNode *left = NULL, *right = NULL;
        left = lowestCommonAncestor(root->left, p, q);
        right = lowestCommonAncestor(root->right, p , q);
        if(left && right) return root;
        if(left) return left;
        else if(right) return right;
        else return NULL;
    }
    void solve(TreeNode* root, int value, string& temp, string& s) {
        if(root == NULL) return;
        if(root->val == value) {
            s = temp;
            return;
        }
        temp.push_back('L');
        solve(root->left, value, temp, s);
        temp.pop_back();
        temp.push_back('R');
        solve(root->right, value, temp, s);
        temp.pop_back();
    }
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        TreeNode* node = lowestCommonAncestor(root, startValue, destValue);
        string s1 = "", s2 = "", temp = "";
        solve(node, startValue, temp, s1);
        solve(node, destValue, temp, s2);
        int i = 0;
        for(; i < min(s1.size(), s2.size()); i++) {
            if(s1[i] != s2[i]) break;
        }
        string res = "";
        for(int j = i; j < s1.size(); j++) {
            res += "U";
        }
        for(int j = i; j < s2.size(); j++) {
            res += s2[j];
        }
        return res;
    }
};
